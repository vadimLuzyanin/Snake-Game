{"version":3,"sources":["Cell.jsx","Score.jsx","App.jsx","index.js"],"names":["Cell","index","food","snakeState","resolution","useState","cellColor","setCellColor","outlineColor","setOutlineColor","isIndexMatches","coordinates","row","col","useEffect","forEach","snakeCell","style","height","width","outline","backgroundColor","Score","tickInterval","snakeLength","gameStart","handleGameStart","handleResolutionSet","inputState","setInputState","fontSize","marginTop","display","minWidth","justifyContent","alignItems","Math","floor","pow","value","onClick","e","stopPropagation","onChange","target","placeholder","App","setResolution","random","setFood","setSnakeState","setGameStart","mainRef","useRef","window","addEventListener","current","focus","direction","setDirection","prevDirection","setPrevDirection","isLose","setIsLose","time","setTime","setTickInterval","clearInterval","gameTimer","setInterval","prev","gameTick","spawnRandomFood","some","newSnakeState","unshift","calculateNewSnakeHead","pop","grid","Array","fill","map","item","key","snakeHead","flexDirection","flexWrap","padding","tabIndex","ref","onKeyDown","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7d60e009.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\n\r\nconst Cell = ({ index, food, snakeState, resolution }) => {\r\n    const [cellColor, setCellColor] = useState('white')\r\n    const [outlineColor, setOutlineColor] = useState('1px solid black')\r\n\r\n    const isIndexMatches = (coordinates) => {\r\n        return index === coordinates.row * resolution + coordinates.col\r\n    }\r\n\r\n    useEffect(() => {\r\n        setCellColor('white')\r\n        setOutlineColor('1px solid black')\r\n        if (isIndexMatches(food)) {\r\n            setCellColor('red')\r\n        }\r\n        snakeState.forEach((snakeCell, index) => {\r\n            if (isIndexMatches(snakeCell) && index === 0) {\r\n                setCellColor('green')\r\n            } else if (isIndexMatches(snakeCell)) {\r\n                setCellColor('black')\r\n                setOutlineColor('1px solid red')\r\n            }\r\n        })\r\n    }, [food, snakeState])\r\n\r\n    return (\r\n        <div style={{\r\n            height: '3vh',\r\n            width: '3vh',\r\n            outline: outlineColor,\r\n            backgroundColor: cellColor\r\n        }}></div>\r\n    )\r\n}\r\n\r\nexport default Cell","import React, { useState, Fragment } from 'react'\r\n\r\nconst Score = ({ tickInterval, snakeLength, gameStart, handleGameStart, resolution, handleResolutionSet }) => {\r\n    const [inputState, setInputState] = useState('')\r\n\r\n    return (\r\n        <div style={{\r\n            fontSize: '25px',\r\n            marginTop: '15px',\r\n            display: 'flex',\r\n            minWidth: '50vw',\r\n            justifyContent: 'space-between',\r\n            alignItems: 'center'\r\n        }}>\r\n            <span>Score: {Math.floor(Math.pow(snakeLength, 2) * 1000 / tickInterval)}</span>\r\n            <div style={{\r\n                display: 'flex',\r\n                height: '100%',\r\n                justifyContent: 'space-around',\r\n                alignItems: 'center',\r\n                minWidth: '25vw'\r\n            }}>\r\n                {!gameStart && (\r\n                    <Fragment >\r\n                        <input\r\n                            value={inputState}\r\n                            onClick={(e) => e.stopPropagation()}\r\n                            onChange={(e) => setInputState(e.target.value)}\r\n                            placeholder='min=5, max=30'\r\n                            style={{\r\n                                fontSize: '20px',\r\n                                height: '100%'\r\n                            }} >\r\n                        </input>\r\n                        <button\r\n                            onClick={() => handleResolutionSet(inputState)}\r\n                            style={{\r\n                                fontSize: '25px',\r\n                                height: '100%'\r\n                            }}\r\n                        >\r\n                            Set resoluton\r\n                        </button>\r\n                    </Fragment>\r\n                )}\r\n            </div>\r\n            {!gameStart && (\r\n                <button\r\n                    onClick={handleGameStart}\r\n                    style={{\r\n                        fontSize: '25px',\r\n                        height: '100%'\r\n                    }}\r\n                >\r\n                    Start\r\n                </button>\r\n            )}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Score\r\n","import React, { useState, useEffect, useRef } from 'react'\nimport Cell from './Cell'\nimport Score from './Score'\n\nconst App = () => {\n\n  const [resolution, setResolution] = useState(30)\n\n  const [food, setFood] = useState({ row: Math.floor(Math.random() * resolution), col: Math.floor(Math.random() * resolution) })\n\n  const [snakeState, setSnakeState] = useState([\n    { row: Math.floor((resolution - 1) / 2), col: Math.floor((resolution - 1) / 2) },\n  ])\n\n  const [gameStart, setGameStart] = useState(false)\n\n  const handleGameStart = () => {\n    setGameStart((prev) => !prev)\n    mainRef.current.focus()\n  }\n\n  const mainRef = useRef()\n\n  useEffect(() => {\n    window.addEventListener('click', () => mainRef.current.focus())\n  },[])\n\n  const [direction, setDirection] = useState('ltr')\n  const [prevDirection, setPrevDirection] = useState('')\n\n  const [isLose, setIsLose] = useState(false)\n\n  const [time, setTime] = useState(0)\n\n  const [tickInterval, setTickInterval] = useState(1000)\n\n  useEffect(() => {\n    clearInterval(window.gameTimer)\n\n    window.gameTimer = setInterval(() => {\n      setTime((prev) => prev + 1)\n    }, tickInterval)\n\n    return () => clearInterval(window.gameTimer)\n  }, [tickInterval])\n\n  useEffect(() => {\n    gameTick()\n  }, [time])\n\n  const spawnRandomFood = () => {\n    let row = Math.floor(Math.random() * resolution)\n    let col = Math.floor(Math.random() * resolution)\n\n    setFood({ row: row, col: col })\n  }\n\n  useEffect(() => {\n    if (snakeState.some(({ row, col }) => (food.row === row && food.col === col))) {\n      spawnRandomFood()\n    }\n  }, [snakeState, food])\n\n  const gameTick = () => {\n\n    if (!gameStart) {\n      return\n    }\n\n    setSnakeState((prev) => {\n\n      let newSnakeState = [...prev]\n\n      let calculateNewSnakeHead = () => {\n        switch (direction) {\n\n          case 'btt':  //bottom to top\n            return { row: prev[0].row - 1, col: prev[0].col }\n\n          case 'ttb': //top to bottom\n            return { row: prev[0].row + 1, col: prev[0].col }\n\n          case 'rtl': //right to left\n            return { row: prev[0].row, col: prev[0].col - 1 }\n\n          case 'ltr': //left to right\n          default:\n            return { row: prev[0].row, col: prev[0].col + 1 }\n        }\n      }\n\n      newSnakeState.unshift(calculateNewSnakeHead())\n\n      if (!(newSnakeState[0].row === food.row && newSnakeState[0].col === food.col)) {\n        newSnakeState.pop()\n      } else {\n        setTickInterval((prev) => prev * 0.95)\n        spawnRandomFood()\n      }\n\n      return newSnakeState\n    })\n\n    setPrevDirection(direction)\n  }\n\n  const grid = Array(resolution * resolution).fill(null).map((item, index) => item = <Cell key={index} index={index} food={food} snakeState={snakeState} resolution={resolution} />)\n\n  useEffect(() => {\n    const snakeHead = snakeState[0]\n\n    snakeState.forEach((item, index) => {\n      if (index === 0) return\n      if (item.row === snakeHead.row && item.col === snakeHead.col) {\n        setIsLose(true)\n      }\n    })\n\n    if (snakeHead.row > resolution - 1 || snakeHead.col > resolution - 1 || snakeHead.row < 0 || snakeHead.col < 0) {\n      setIsLose(true)\n    }\n  }, [snakeState, resolution])\n\n  useEffect(() => {\n    if (isLose) {\n      setSnakeState([\n        { row: Math.floor((resolution - 1) / 2), col: Math.floor((resolution - 1) / 2) },\n      ])\n      spawnRandomFood()\n      setDirection('ltr')\n      setIsLose(false)\n      setTickInterval(1000)\n      setGameStart(false)\n    }\n  }, [isLose, resolution])\n\n  const handleResolutionSet = (value) => {\n    if (typeof +value === 'number' && +value <= 30 && +value >= 5) {\n      setResolution(+value)\n      setSnakeState([\n        { row: Math.floor((resolution - 1) / 2), col: Math.floor((resolution - 1) / 2) },\n      ])\n      spawnRandomFood()\n      setDirection('ltr')\n      setIsLose(false)\n      setTickInterval(1000)\n      setGameStart(false)\n\n    }\n  }\n\n  const handleKeyDown = (e) => {\n    const key = e.key\n\n    switch (key) {\n      case 'ArrowUp':\n        if (prevDirection === 'ltr' || prevDirection === 'rtl') {\n          setDirection('btt')\n        }\n        break;\n\n      case 'ArrowDown':\n        if (prevDirection === 'ltr' || prevDirection === 'rtl') {\n          setDirection('ttb')\n        }\n        break;\n\n      case 'ArrowLeft':\n        if (prevDirection === 'ttb' || prevDirection === 'btt') {\n          setDirection('rtl')\n        }\n        break;\n\n      case 'ArrowRight':\n      default:\n        if (prevDirection === 'ttb' || prevDirection === 'btt') {\n          setDirection('ltr')\n        }\n        break;\n    }\n  }\n\n  return (\n    <div style={{display: 'flex',\n     flexDirection: 'column',\n      alignItems: 'center',\n       justifyContent: 'center',\n        height: '99vh'}}>\n      <div\n        style={{\n          display: 'flex',\n          flexWrap: 'wrap',\n          width: (resolution * 3) + 'vh',\n          padding: '10px'\n        }}\n        tabIndex='0'\n        ref={mainRef}\n        onKeyDown={handleKeyDown}\n      >\n        {grid}\n\n      </div>\n      <Score\n        tickInterval={tickInterval}\n        snakeLength={snakeState.length}\n        gameStart={gameStart}\n        handleGameStart={handleGameStart}\n        resolution={resolution}\n        handleResolutionSet={handleResolutionSet} />\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}